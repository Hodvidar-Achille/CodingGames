package com.hodvidar.codingame.puzzles.medium;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.assertj.core.api.Assertions.assertThat;

class NumberWithOnlyTwoDistinctDigitsTest {

    @ParameterizedTest
    @CsvSource(delimiter = '|', value = {
            "1  | 2 | 5 | 2",
            "1  | 6 | 7 | 6",
            "2  | 4 | 7 | 44",
            "2  | 4 | 3 | 44",
            "7  | 5 | 4 | 4444544",
            "7  | 7 | 6 | 6667776",
            "21 | 6 | 7 | 777777777666766667776",
            "21 | 1 | 2 | 112111211111212122112",
            "100| 9 | 4 | 4999999449449999994999449944944994449499994444449494944949944994494999944449444499949499449494994944",
            "100| 4 | 7 | 7474744444777777747777747447477444774744477447474444474744444477474477447474474777477444474444447744",
            "250| 2 | 1 | 2112112222112221212111112121221221121211221111121212111111121212222212211222122122212112211221221112222121221212121121112111222221122221221121111212121211211211221121211211121122122211212221112122111122212112212121112121121122111112111211111212122112",
            "250| 9 | 6 | 6666699666999996669666699966969699699699696996969996666666996969966696996699969666666966999669966969966996696996666999666699999969996966696696696666699696996969996696666699969996699969669666696696696696996666999996996999999996669699999969969696669696",
            "500| 2 | 7 |
            "500| 9 | 2 |
    })
    void testFindNumber(final int n, final int a, final int b, final String expected) throws Exception {
        // The order of a/b does not matter â€“ the method itself decides which is even/odd.
        final String actual = NumberWithOnlyTwoDistinctDigits.findNumber(a, b, n).toString();
        assertThat(actual).isEqualTo(expected);
    }
}